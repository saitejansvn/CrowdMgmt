package com.teja.main;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.objdetect.Objdetect;
import org.opencv.videoio.VideoCapture;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.util.Duration;

public class FaceDetectionController {

    @FXML
    private Button cameraButton;

    @FXML
    private ImageView originalFrame;

    @FXML
    private CheckBox haarClassifier;

    @FXML
    private CheckBox lbpClassifier;

    private CascadeClassifier faceCascade;
    private int absoluteFaceSize;

    private boolean cameraActive = false;
    private VideoCapture capture = new VideoCapture();
    private ScheduledExecutorService frameGrabberExecutor;
    private Timeline timer;

    private int faceCounter = 0;

    protected void init() {
        this.capture = new VideoCapture();
        this.faceCascade = new CascadeClassifier();
        this.absoluteFaceSize = 0;

        originalFrame.setFitWidth(600);
        originalFrame.setPreserveRatio(true);
    }

    protected void startCamera() {
        if (!cameraActive) {
            this.haarClassifier.setDisable(true);
            this.lbpClassifier.setDisable(true);

            this.capture.open(0);

            if (this.capture.isOpened()) {
                cameraActive = true;
                cameraButton.setText("Stop Camera");

                frameGrabberExecutor = Executors.newSingleThreadScheduledExecutor();
                frameGrabberExecutor.scheduleAtFixedRate(this::grabAndProcessFrame, 0, 33, TimeUnit.MILLISECONDS);

                timer = new Timeline(new KeyFrame(Duration.seconds(2), event -> startCameraTask()));
                timer.setCycleCount(Timeline.INDEFINITE);
                timer.play();
            } else {
                System.err.println("Failed to open the camera connection...");
            }
        } else {
            cameraActive = false;
            cameraButton.setText("Start Camera");
            haarClassifier.setDisable(false);
            lbpClassifier.setDisable(false);

            stopAcquisition();
        }
    }

    private void startCameraTask() {
        grabAndProcessFrame();
    }

    private void grabAndProcessFrame() {
        if (cameraActive) {
            Mat frame = grabFrame();
            Image imageToShow = Utils.mat2Image(frame);
            updateImageView(originalFrame, imageToShow);
        }
    }

    private Mat grabFrame() {
        Mat frame = new Mat();

        if (capture.isOpened()) {
            try {
                capture.read(frame);

                if (!frame.empty()) {
                    detectAndDisplay(frame);
                }
            } catch (Exception e) {
                System.err.println("Exception during the image elaboration: " + e);
            }
        }

        return frame;
    }

    private void detectAndDisplay(Mat frame) {
        MatOfRect faces = new MatOfRect();
        Mat grayFrame = new Mat();

        Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY);
        Imgproc.equalizeHist(grayFrame, grayFrame);

        if (absoluteFaceSize == 0) {
            int height = grayFrame.rows();
            if (Math.round(height * 0.2f) > 0) {
                absoluteFaceSize = Math.round(height * 0.2f);
            }
        }

        faceCascade.detectMultiScale(grayFrame, faces, 1.1, 2, 0 | Objdetect.CASCADE_SCALE_IMAGE,
                new Size(absoluteFaceSize, absoluteFaceSize), new Size());

        Rect[] facesArray = faces.toArray();
        for (int i = 0; i < facesArray.length; i++) {
            System.out.println(facesArray[i]);
            Imgproc.rectangle(frame, facesArray[i].tl(), facesArray[i].br(), new Scalar(0, 255, 0), 3);
            faceCounter++;
        }

        System.out.println("Total faces detected: " + faceCounter);
    }

    @FXML
    protected void haarSelected(Event event) {
        if (lbpClassifier.isSelected()) {
            lbpClassifier.setSelected(false);
        }
        checkboxSelection("resources/haarcascades/haarcascade_frontalface_alt.xml");
    }

    @FXML
    protected void lbpSelected(Event event) {
        if (haarClassifier.isSelected()) {
            haarClassifier.setSelected(false);
        }
        checkboxSelection("resources/lbpcascades/lbpcascade_frontalface.xml");
    }

    private void checkboxSelection(String classifierPath) {
        faceCascade.load(classifierPath);
        cameraButton.setDisable(false);
    }

    
    
    private void stopAcquisition() {
        if (frameGrabberExecutor != null  && !this.frameGrabberExecutor.isShutdown() ) {
            try {
                timer.stop();
                timer.play();
                timer.setDelay(Duration.millis(33));
                frameGrabberExecutor.shutdown();
                frameGrabberExecutor.awaitTermination(33, TimeUnit.MILLISECONDS);
            } catch (InterruptedException e) {
                System.err.println("Exception in stopping the frame capture: " + e);
            }
        }

        if (capture.isOpened()) {
            capture.release();
        }
    }

    private void updateImageView(ImageView view, Image image) {
        Utils.onFXThread(view.imageProperty(), image);
    }

    protected void setClosed() {
        stopAcquisition();
    }
}
